/**
 * types.ts
 * --------
 * This file contains the core TypeScript interfaces and types that define the
 * data structures used throughout the Synpatico protocol and SDKs.
 */

// Represents the basic information generated by the `genome` package.
export interface StructureInfo {
  id: string;
  levels: number;
  collisionCount: number;
}

// Defines the shape of the access pattern object, used for tracking client-side data usage.
export interface AccessPattern {
  accessed: string[];
  mutated: Array<[string, { oldValue: unknown; newValue: unknown }]>;
  timestamp: number;
}

// Describes the optimized packet sent from the server to the client.
export interface StructurePacket {
  type: 'values-only' | 'differential';
  structureId: string;
  values: unknown; // Can be a full values-array or a partial object for differential updates
  paths?: string[]; // For differential updates
  metadata?: {
    collisionCount: number;
    levels: number;
    timestamp?: number;
  };
}

// Defines the shape of a cached structure definition.
export interface StructureDefinition {
  // A recursive map of the object's structure.
  shape: Record<string, unknown>;
  // The unique, deterministic ID for this structure.
  id: string;
}

// The context object passed to the `encode` function.
export interface EncodeContext {
  // The structure ID that the client expects, sent in the 'X-Accept-Structure-ID' header.
  knownStructureId: string;
  requestId?: string;
}

// Describes the structure of the client-side cache.
export interface ClientRegistry {
  structures: Map<string, StructureDefinition>;
  patterns: Map<string, AccessPattern[]>;
  // Cache to map a request identifier (like a URL) to a structure ID.
  requestToStructureId: Map<string, string>;
}

// Configuration options for a server-side framework integration (e.g., for Waku).
export interface WakuIntegrationConfig {
  enabled?: boolean;
  fallbackOnError?: boolean;
  maxStructureCacheSize?: number;
  enablePatternLearning?: boolean;
}
